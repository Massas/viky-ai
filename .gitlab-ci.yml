stages:
  - prerequist
  - build
  - test
  - docker_tag
  - deploy
  - admin

image: vikyai/tools-gitlab-auto-deploy-image:latest

.kubernetes_runner:
  tags:
    - kubernetes

variables:
  SKIP_TEST: "true"
  CI_SERVICE_HOST: "127.0.0.1"
  GIT_SUBMODULE_STRATEGY: none
  DOCKER_HOST: "tcp://dood:2375"
  DOCKER_DRIVER: overlay2
  DOCKER_IMAGE_APP: $CI_REGISTRY_IMAGE/app
  DOCKER_IMAGE_NLP: $CI_REGISTRY_IMAGE/nlp
  DOCKER_IMAGE_TOOLS_NLP: $CI_REGISTRY_IMAGE/tools_nlp_base
  DOCKER_IMAGE_TOOLS_RUBY: $CI_REGISTRY_IMAGE/tools_ruby_base
  DOCKER_IMAGE_TOOLS_BACKUP: $CI_REGISTRY_IMAGE/tools_backup

# Build docker image

build_ruby_base:
  extends: .kubernetes_runner
  stage: prerequist
  script:
    - docker_build ${DOCKER_IMAGE_TOOLS_RUBY}      deployment/docker_tools/ruby_base "--target image_ruby_base"
    - docker_build ${DOCKER_IMAGE_TOOLS_RUBY}_test deployment/docker_tools/ruby_base "--target image_ruby_base_test"

build_nlp_base:
  extends: .kubernetes_runner
  stage: prerequist
  script:
    - docker_build ${DOCKER_IMAGE_TOOLS_NLP} nlp/tools/docker

build_backup:
  extends: .kubernetes_runner
  stage: prerequist
  script:
    - docker_build ${DOCKER_IMAGE_TOOLS_BACKUP} deployment/docker_tools/backup "--build-arg VIKYAPP_BACKUP_PASSWORD=${VIKYAPP_BACKUP_PASSWORD}"

build_webapp:
  extends: .kubernetes_runner
  needs: ["build_ruby_base"]
  stage: build
  script:
    - docker_build ${DOCKER_IMAGE_APP}      webapp "--build-arg VIKY_IMAGE_TAG=${CI_COMMIT_REF_SLUG} --target image_ruby_run"

build_webapp_test:
  extends: .kubernetes_runner
  needs: ["build_ruby_base"]
  stage: build
  script:
    - docker_build ${DOCKER_IMAGE_APP}_test webapp "--build-arg VIKY_IMAGE_TAG=${CI_COMMIT_REF_SLUG} --target image_ruby_test"

build_nlp:
  extends: .kubernetes_runner
  stage: build
  needs: ["build_nlp_base"]
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - docker_build ${DOCKER_IMAGE_NLP}      nlp "--build-arg VIKY_IMAGE_TAG=${CI_COMMIT_REF_SLUG} --target run_image"
    - docker_build ${DOCKER_IMAGE_NLP}_test nlp "--build-arg VIKY_IMAGE_TAG=${CI_COMMIT_REF_SLUG} --target test_image"

# Test
.test_webapp:
  extends: .kubernetes_runner
  stage: test
  image: ${DOCKER_IMAGE_APP}_test:${CI_COMMIT_REF_SLUG}
  needs: ["build_webapp_test"]
  variables:
    POSTGRES_USER: superman
    POSTGRES_PASSWORD: sup_3rman
    POSTGRES_DB: vikyapp_test
  services:
    - postgres:11.5-alpine
    - redis:5.0-alpine
    - name: docker.elastic.co/elasticsearch/elasticsearch:7.3.2
      # Important other wise, port 9200 will never be exposed
      command:
        [
          "bin/elasticsearch",
          "-Ediscovery.type=single-node",
          "-Enetwork.host=0.0.0.0",
        ]
      alias: elasticsearch
  before_script:
    - export VIKYAPP_DB_USERNAME="${POSTGRES_USER}"
    - export VIKYAPP_DB_PASSWORD="${POSTGRES_PASSWORD}"
    - export VIKYAPP_DB_HOST="${CI_SERVICE_HOST:-postgres}"
    - export VIKYAPP_ACTIONCABLE_REDIS_URL="redis://${CI_SERVICE_HOST:-redis}:6379/1"
    - export VIKYAPP_ACTIVEJOB_REDIS_URL="redis://${CI_SERVICE_HOST:-redis}:6379/2"
    - export VIKYAPP_STATISTICS_URL="http://${CI_SERVICE_HOST:-elasticsearch}:9200"
    - export VIKYAPP_STATISTICS_NO_REPLICA="true"
    - cd /webapp
  artifacts:
    # expire_in: 1 week
    reports:
      junit: "reports/TEST-*.xml"

test_webapp_unit:
  extends: .test_webapp
  script:
    - cd /webapp
    - if [ "${SKIP_TEST:-false}" != "true" ]; then ./bin/docker_run_test.sh unit ; fi

# Test
test_webapp_system:
  extends: .test_webapp
  script:
    - if [ "${SKIP_TEST:-false}" != "true" ]; then ./bin/docker_run_test.sh system ; fi

test_nlp:
  extends: .kubernetes_runner
  stage: test
  needs: ["build_nlp"]
  image: ${DOCKER_IMAGE_NLP}_test:${CI_COMMIT_REF_SLUG}
  services:
    - redis:5.0-alpine
  variables:
    GIT_STRATEGY: none
  script:
    - export VIKYAPP_REDIS_PACKAGE_NOTIFIER="redis://${CI_SERVICE_HOST:-redis}:6379/3"
    - if [ "${SKIP_TEST:-false}" != "true" ]; then /docker_run_test.sh ; fi
  artifacts:
    # expire_in: 1 week
    reports:
      junit:
        - "reports/TEST-*.xml"

# Tag docker image to lasted
tag_webapp:
  extends: .kubernetes_runner
  stage: docker_tag
  only:
    - develop
  variables:
    GIT_STRATEGY: none
  script:
    - docker_tag_latest ${DOCKER_IMAGE_APP}
    - docker_tag_latest ${DOCKER_IMAGE_APP}_test

tag_nlp:
  extends: .kubernetes_runner
  stage: docker_tag
  needs: ["build_nlp", "test_nlp"]
  only:
    - develop
  variables:
    GIT_STRATEGY: none
  script:
    - docker_tag_latest ${DOCKER_IMAGE_NLP}

tag_ruby_base:
  extends: .kubernetes_runner
  stage: docker_tag
  only:
    - develop
  variables:
    GIT_STRATEGY: none
  script:
    - docker_tag_latest ${DOCKER_IMAGE_TOOLS_RUBY}
    - docker_tag_latest ${DOCKER_IMAGE_TOOLS_RUBY}_test

tag_backup:
  extends: .kubernetes_runner
  stage: docker_tag
  only:
    - develop
  variables:
    GIT_STRATEGY: none
  script:
    - docker_tag_latest ${DOCKER_IMAGE_TOOLS_BACKUP}

# Deploy any branches on dev
deploy_dev:
  extends: .kubernetes_runner
  stage: deploy
  except:
    - master
    - tags
  dependencies:
    - build_webapp
    - build_nlp
  environment:
    name: ${CI_COMMIT_REF_NAME}
    url: https://viky-${CI_ENVIRONMENT_SLUG}-kube.viky.ai
    on_stop: delete_env
  variables:
    HELM_RELEASE_NAME: "viky_dev"
    VIKY_IMAGE_TAG: ${CI_COMMIT_REF_SLUG}
    S3_ACCESS_KEY: ${S3_ACCESS_KEY}
    S3_SECRET_KEY: ${S3_SECRET_KEY}
  script:
    - kube_setup
    - helm history "${RELEASE_NAME}" || true
    - helm status  "${RELEASE_NAME}" || true
    # Go to Kubernetes directory
    - cd deployment/kubernetes/
    - echo "Generate Override values"
    - bin/generateOverrideValuesFile.sh
    - |
      # Deploy Viky Platform
      helm upgrade --wait --timeout 600 --install \
        --namespace "${KUBE_NAMESPACE}" \
        --values custom-values.yml,viky-platform/custom-values/production.yaml \
        "${RELEASE_NAME}" \
        ./viky-platform/
# Deploy master on preprod
deploy_preprod:
  extends: .kubernetes_runner
  stage: deploy
  only:
    - master
  except:
    - tags
  dependencies:
    - build_webapp
    - build_nlp
  environment:
    name: viky-preprod
    url: https://viky-beta-kube.viky.ai
  variables:
    HELM_RELEASE_NAME: "viky_preprod"
    VIKYAPP_AUTO_BACKUP: "true"
    VIKY_IMAGE_TAG: ${CI_COMMIT_REF_SLUG}
    S3_ACCESS_KEY: ${S3_ACCESS_KEY}
    S3_SECRET_KEY: ${S3_SECRET_KEY}
  script:
    - kube_setup
    - helm history "${RELEASE_NAME}" || true
    - helm status  "${RELEASE_NAME}" || true
    # Go to Kubernetes directory
    - cd deployment/kubernetes/
    - echo "Generate Override values"
    - bin/generateOverrideValuesFile.sh
    - |
      # Deploy Viky Platform
      helm upgrade --wait --timeout 600 --install \
        --namespace "${KUBE_NAMESPACE}" \
        --values custom-values.yml,viky-platform/custom-values/production.yaml \
        "${RELEASE_NAME}" \
        ./viky-platform/

# remove environment
delete_env:
  extends: .kubernetes_runner
  stage: admin
  needs: [ "build_backup" ]
  except:
    - master
    - tags
  environment:
    name: ${CI_COMMIT_REF_NAME}
    url: https://viky-${CI_ENVIRONMENT_SLUG}-kube.viky.ai
    action: stop
  variables:
      GIT_STRATEGY: none
      HELM_RELEASE_NAME: "viky_dev"
  script:
    - kube_setup
    - helm history "${RELEASE_NAME}" || true
    - helm status  "${RELEASE_NAME}" || true
    - kubectl delete secret --ignore-not-found viky-infra-es-keystore-secret viky-backup-secret
    - kube_cleanup
  when: manual
  allow_failure: true

# invite admin user
invite_admin_dev:
  extends: .kubernetes_runner
  stage: admin
  except:
    - master
    - tags
  environment:
    name: ${CI_COMMIT_REF_NAME}
    url: https://viky-${CI_ENVIRONMENT_SLUG}-kube.viky.ai
  variables:
    GIT_STRATEGY: none
  script:
    - PODNAME=$(kube_get_pods "app=viky-webapp")
    - kubectl exec $PODNAME ./bin/rails users:invite_admin[${GITLAB_USER_EMAIL}]
  when: manual
  allow_failure: true

# invite admin user
invite_admin_preprod:
  extends: .kubernetes_runner
  stage: admin
  only:
    - master
  environment:
    name: viky-preprod
    url: https://viky-beta-kube.viky.ai
  variables:
    GIT_STRATEGY: none
  script:
    - PODNAME=$(kube_get_pods "app=viky-webapp")
    - kubectl exec $PODNAME ./bin/rails users:invite_admin[${GITLAB_USER_EMAIL}]
  when: manual
  allow_failure: true

# backup
backup_dev:
  extends: .kubernetes_runner
  stage: admin
  dependencies: []
  except:
    - master
    - tags
  environment:
    name: ${CI_COMMIT_REF_NAME}
    url: https://viky-${CI_ENVIRONMENT_SLUG}-kube.viky.ai
  variables:
    GIT_STRATEGY: none
  script:
    - PODNAME=$(kube_get_pods "app=viky-webapp-backup")
    - kubectl exec ${PODNAME}  bash /backup/backup.sh
  when: manual
  allow_failure: true

# backup
backup_preprod:
  extends: .kubernetes_runner
  stage: admin
  dependencies: []
  only:
    - master
  environment:
    name: viky-preprod
    url: https://viky-beta-kube.viky.ai
  variables:
    GIT_STRATEGY: none
  script:
    - PODNAME=$(kube_get_pods "app=viky-webapp-backup")
    - kubectl exec ${PODNAME}  bash /backup/backup.sh
  when: manual
  allow_failure: true

# backup restore
backup_restore_dev:
  extends: .kubernetes_runner
  stage: admin
  dependencies: []
  except:
    - master
    - tags
  environment:
    name: ${CI_COMMIT_REF_NAME}
    url: https://viky-${CI_ENVIRONMENT_SLUG}-kube.viky.ai
  variables:
    GIT_STRATEGY: none
  script:
    - PODNAME=$(kube_get_pods "app=viky-webapp-backup")
    # backup current env
    - kubectl exec $PODNAME  bash /backup/backup.sh || true
    # restore base on viky-beta
    - kubectl exec $PODNAME  bash /backup/restore.sh "viky-beta"
    # delete pods to restart viky apps deployment
    - kubectl delete pods -l 'app in (viky-webapp-worker, viky-webapp, viky-nlp)'
  when: manual
  allow_failure: true

