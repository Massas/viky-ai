stages:
  - prerequist
  - build
  - test
  - docker_tag
  - deploy
  - admin

image: docker:dind

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DOCKER_DRIVER: overlay
  DOCKER_IMAGE_APP: $CI_REGISTRY_IMAGE/app
  DOCKER_IMAGE_DOC: $CI_REGISTRY_IMAGE/doc
  DOCKER_IMAGE_NLP: $CI_REGISTRY_IMAGE/nlp
  DOCKER_IMAGE_TOOLS_LB: $CI_REGISTRY_IMAGE/tools_load_balancer
  DOCKER_IMAGE_TOOLS_RUBY: $CI_REGISTRY_IMAGE/tools_ruby_base
  TRACE: 1

# Build docker image

build_ruby_base:
  stage: prerequist
  script:
    - docker_build ${DOCKER_IMAGE_TOOLS_RUBY} deployment/docker_tools/ruby_base

build_loadbalancer:
  stage: build
  script:
    - docker_build ${DOCKER_IMAGE_TOOLS_LB} deployment/docker_tools/load_balancer

build_webapp:
  stage: build
  script:
    - docker_build ${DOCKER_IMAGE_APP}      webapp "--build-arg RUBY_BASE_VERSION=${CI_COMMIT_REF_SLUG} --target image_ruby_run"
    - docker_build ${DOCKER_IMAGE_APP}_test webapp "--build-arg RUBY_BASE_VERSION=${CI_COMMIT_REF_SLUG} --target image_ruby_test"

build_doc:
  stage: build
  script:
    - docker_build ${DOCKER_IMAGE_DOC} doc "--build-arg RUBY_BASE_VERSION=${CI_COMMIT_REF_SLUG}"

build_nlp:
  stage: build
  script:
    - docker_build ${DOCKER_IMAGE_NLP}      nlp "--target run_image"
    - docker_build ${DOCKER_IMAGE_NLP}_test nlp "--target test_image"

# Test
test_webapp:
  stage: test
  image: ${DOCKER_IMAGE_APP}_test:${CI_COMMIT_REF_SLUG}
  variables:
    GIT_STRATEGY: none
    VOQALAPP_DB_USERNAME: superman
    VOQALAPP_DB_PASSWORD: sup_3rman
    VOQALAPP_DB_HOST: postgres
    POSTGRES_USER: superman
    POSTGRES_PASSWORD: sup_3rman
    POSTGRES_DB: voqalapp_test
    VOQALAPP_ACTIONCABLE_REDIS_URL: 'redis://redis/1'
    VOQALAPP_ACTIVEJOB_REDIS_URL: 'redis://redis/2'
  services:
    - postgres:9.6-alpine
    - redis:4.0-alpine
  script:
    - cd /webapp
    - ./bin/docker_run_test.sh

test_nlp:
  stage: test
  image: ${DOCKER_IMAGE_NLP}_test:${CI_COMMIT_REF_SLUG}
  variables:
    GIT_STRATEGY: none
  script:
    - cd /tests
    - bundle exec rake test

# Tag docker image to lasted
tag_webapp:
  stage: docker_tag
  only:
    - develop
  variables:
    GIT_STRATEGY: none
  script:
    - docker_tag_latest ${DOCKER_IMAGE_APP}

tag_doc:
  stage: docker_tag
  only:
    - develop
  variables:
    GIT_STRATEGY: none
  script:
    - docker_tag_latest ${DOCKER_IMAGE_DOC}

tag_nlp:
  stage: docker_tag
  only:
    - develop
  variables:
    GIT_STRATEGY: none
  script:
    - docker_tag_latest ${DOCKER_IMAGE_NLP}

tag_ruby_base:
  stage: docker_tag
  only:
    - develop
  variables:
    GIT_STRATEGY: none
  script:
    - docker_tag_latest ${DOCKER_IMAGE_TOOLS_RUBY}

tag_loadbalancer:
  stage: docker_tag
  only:
    - develop
  variables:
    GIT_STRATEGY: none
  script:
    - docker_tag_latest ${DOCKER_IMAGE_TOOLS_LB}

# Deploy any branches on rancher dev
deploy_dev:
  stage: deploy
  except:
    - master
    - tags
  image: docker-registry.pertimm.net/tools/docker-rancher-cli:latest
  dependencies:
    - build_webapp
    - build_nlp
  environment:
    name: ${CI_COMMIT_REF_NAME}
    url: https://viky-${CI_ENVIRONMENT_SLUG}-platform-dev.viky.ai
    on_stop: delete_env
  variables:
    VOQALAPP_DEPLOY_RANCHER_STACK: viky-${CI_ENVIRONMENT_SLUG}-platform-dev
    VOQALAPP_BASEURL: https://viky-${CI_ENVIRONMENT_SLUG}-platform-dev.viky.ai
    VOQAL_IMAGE_TAG: ${CI_COMMIT_REF_SLUG}
  script:
    - echo "Deploy ${VOQALAPP_DEPLOY_RANCHER_STACK} on ${RANCHER_URL}/dev ( ${CI_ENVIRONMENT_URL} )"
    - cd deployment
    - rancher --debug --environment dev up --stack ${VOQALAPP_DEPLOY_RANCHER_STACK} --file docker-compose.yml --file docker-compose-rancher.yml -d --pull --force-upgrade --confirm-upgrade

# Deploy master on rancher preprod
deploy_preprod:
  stage: deploy
  only:
    - master
  except:
    - tags
  image: docker-registry.pertimm.net/tools/docker-rancher-cli:latest
  dependencies:
    - build_webapp
    - build_nlp
  environment:
    name: viky-preprod
    url: https://viky-beta.viky.ai
  variables:
    VOQALAPP_DEPLOY_RANCHER_STACK: viky-beta
    VOQALAPP_BASEURL: https://viky-beta.viky.ai
    VOQAL_IMAGE_TAG: ${CI_COMMIT_REF_SLUG}
  script:
    - echo "Deploy ${VOQALAPP_DEPLOY_RANCHER_STACK} on ${RANCHER_URL}/dev ( ${CI_ENVIRONMENT_URL} )"
    - cd deployment
    - rancher --debug --environment preprod up --stack ${VOQALAPP_DEPLOY_RANCHER_STACK} --file docker-compose.yml --file docker-compose-rancher.yml -d --pull --force-upgrade


# remove environment
delete_env:
  stage: admin
  except:
    - master
    - tags
  image: docker-registry.pertimm.net/tools/docker-rancher-cli:latest
  environment:
    name: ${CI_COMMIT_REF_NAME}
    url: https://viky-${CI_ENVIRONMENT_SLUG}-platform-dev.viky.ai
    action: stop
  variables:
    VOQALAPP_DEPLOY_RANCHER_STACK: viky-${CI_ENVIRONMENT_SLUG}-platform-dev
    VOQALAPP_BASEURL: https://viky-${CI_ENVIRONMENT_SLUG}-platform-dev.viky.ai
    VOQAL_IMAGE_TAG: ${CI_COMMIT_REF_SLUG}
  script:
    - echo "Remove ${VOQALAPP_DEPLOY_RANCHER_STACK} on ${RANCHER_URL}/dev ( ${CI_ENVIRONMENT_URL} )"
    - rancher --debug --environment dev rm --stop --type stack ${VOQALAPP_DEPLOY_RANCHER_STACK}
  when: manual
  allow_failure: true

# invite admin user
invite_admin_dev:
  stage: admin
  image: docker-registry.pertimm.net/tools/docker-rancher-cli:latest
  except:
    - master
    - tags
  environment:
    name: ${CI_COMMIT_REF_NAME}
    url: https://viky-${CI_ENVIRONMENT_SLUG}-platform-dev.viky.ai
  variables:
    GIT_STRATEGY: none
    VOQALAPP_DEPLOY_RANCHER_STACK: viky-${CI_ENVIRONMENT_SLUG}-platform-dev
    VOQALAPP_BASEURL: https://viky-${CI_ENVIRONMENT_SLUG}-platform-dev.viky.ai
  script:
    - echo "Add user ${GITLAB_USER_EMAIL} as admin on ${VOQALAPP_DEPLOY_RANCHER_STACK} on ${RANCHER_URL}/dev ( ${CI_ENVIRONMENT_URL} )"
    - TASK_CMD="./bin/rails users:invite_admin[${GITLAB_USER_EMAIL}]"
    - rancher --environment dev exec ${VOQALAPP_DEPLOY_RANCHER_STACK}-app-1 ${TASK_CMD}
  when: manual
  allow_failure: true

# invite admin user
invite_admin_preprod:
  stage: admin
  image: docker-registry.pertimm.net/tools/docker-rancher-cli:latest
  only:
    - master
  environment:
    name: viky-preprod
    url: https://viky-beta.viky.ai
  variables:
    GIT_STRATEGY: none
    VOQALAPP_DEPLOY_RANCHER_STACK: viky-beta
    VOQALAPP_BASEURL: https://viky-beta.viky.ai
  script:
    - echo "Add user ${GITLAB_USER_EMAIL} as admin on ${VOQALAPP_DEPLOY_RANCHER_STACK} on ${RANCHER_URL}/dev ( ${CI_ENVIRONMENT_URL} )"
    - TASK_CMD="./bin/rails users:invite_admin[${GITLAB_USER_EMAIL}]"
    - rancher --environment preprod exec ${VOQALAPP_DEPLOY_RANCHER_STACK}-app-1 ${TASK_CMD}
  when: manual
  allow_failure: true


# ---------------------------------------------------------------------------

.auto_devops: &auto_devops |
  # Auto DevOps variables and functions
  [[ "$TRACE" ]] && set -x

  function docker_build ()
  {
    # login to private registry
    docker_login

    local CI_DOCKER_IMAGE="$1"
    local CI_DOCKER_DIR="$2"
    local CI_DOCKER_IMAGE_BUILD_OPT="$3"

    echo "Build docker image ${CI_DOCKER_IMAGE}:${CI_COMMIT_REF_SLUG} from dir ${CI_DOCKER_DIR} ..."
    docker build --pull ${CI_DOCKER_IMAGE_BUILD_OPT} -t ${CI_DOCKER_IMAGE}:${CI_COMMIT_REF_SLUG} ${CI_DOCKER_DIR}
    echo ""

    echo "Pushing ${CI_DOCKER_IMAGE}:${CI_COMMIT_REF_SLUG} to GitLab Container Registry ..."
    docker push ${CI_DOCKER_IMAGE}:${CI_COMMIT_REF_SLUG}
    echo ""
  }

  function docker_tag_latest ()
  {
    # login to private registry
    docker_login

    local CI_DOCKER_IMAGE="$1"

    echo "Taggging ${CI_DOCKER_IMAGE}:${CI_COMMIT_REF_SLUG} to ${CI_DOCKER_IMAGE}:latest"
    docker tag ${CI_DOCKER_IMAGE}:${CI_COMMIT_REF_SLUG} ${CI_DOCKER_IMAGE}:latest

    echo "Pushing ${CI_DOCKER_IMAGE}:latest to GitLab Container Registry ..."
    docker push ${CI_DOCKER_IMAGE}:latest
    echo ""
  }

  function docker_login ()
  {
    if [[ -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials ..."
      echo "${CI_REGISTRY_PASSWORD}" | docker login --username "${CI_REGISTRY_USER}" --password-stdin "${CI_REGISTRY}"
      echo ""
    fi
  }

before_script:
  - *auto_devops
