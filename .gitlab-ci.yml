stages:
  - prerequist
  - build
  - test
  - docker_push
  - deploy
  - admin

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DOCKER_DRIVER: overlay
  DOCKER_IMAGE_APP: $CI_REGISTRY_IMAGE/app
  DOCKER_IMAGE_NLP: $CI_REGISTRY_IMAGE/nlp
  DOCKER_IMAGE_TOOLS_LB: $CI_REGISTRY_IMAGE/tools_load_balancer
  DOCKER_IMAGE_TOOLS_RUBY: $CI_REGISTRY_IMAGE/tools_ruby_base

# Build docker image

build_ruby_base:
  stage: prerequist
  image: docker:dind
  script:
    - echo "${CI_REGISTRY_PASSWORD}" | docker login --username "${CI_REGISTRY_USER}" --password-stdin $CI_REGISTRY
    - docker build --pull -t ${DOCKER_IMAGE_TOOLS_RUBY}:${CI_COMMIT_REF_SLUG} deployment/docker_tools/load_balancer
    - docker push ${DOCKER_IMAGE_TOOLS_RUBY}:${CI_COMMIT_REF_SLUG}

build_loadbalancer:
  stage: build
  image: docker:dind
  script:
    - echo "${CI_REGISTRY_PASSWORD}" | docker login --username "${CI_REGISTRY_USER}" --password-stdin $CI_REGISTRY
    - docker build --pull -t ${DOCKER_IMAGE_TOOLS_LB}:${CI_COMMIT_REF_SLUG} deployment/deployment/docker_tools/ruby_base
    - docker push ${DOCKER_IMAGE_TOOLS_LB}:${CI_COMMIT_REF_SLUG}

build_webapp:
  stage: build
  image: docker:dind
  script:
    - "echo \"{ \\\"commit\\\": \\\"${CI_COMMIT_SHA}\\\", \\\"branch\\\": \\\"${CI_COMMIT_REF_SLUG}\\\", \\\"tag\\\": \\\"${CI_COMMIT_TAG}\\\" }\" > ./webapp/version.json"
    - echo "${CI_REGISTRY_PASSWORD}" | docker login --username "${CI_REGISTRY_USER}" --password-stdin $CI_REGISTRY
    - docker build --pull --target image_ruby_run  -t ${DOCKER_IMAGE_APP}:${CI_COMMIT_REF_SLUG} webapp
    - docker build --pull --target image_ruby_test -t ${DOCKER_IMAGE_APP}_test:${CI_COMMIT_REF_SLUG} webapp
    - docker push ${DOCKER_IMAGE_APP}:${CI_COMMIT_REF_SLUG}
    - docker push ${DOCKER_IMAGE_APP}_test:${CI_COMMIT_REF_SLUG}

build_nlp:
  stage: build
  image: docker:dind
  script:
    - echo "${CI_REGISTRY_PASSWORD}" | docker login --username "${CI_REGISTRY_USER}" --password-stdin $CI_REGISTRY
    - docker build --pull --target run_image  -t ${DOCKER_IMAGE_NLP}:${CI_COMMIT_REF_SLUG} nlp
    - docker build --pull --target test_image -t ${DOCKER_IMAGE_NLP}_test:${CI_COMMIT_REF_SLUG} nlp
    - docker push ${DOCKER_IMAGE_NLP}:${CI_COMMIT_REF_SLUG}
    - docker push ${DOCKER_IMAGE_NLP}_test:${CI_COMMIT_REF_SLUG}

# Test
test_webapp:
  stage: test
  image: ${DOCKER_IMAGE_APP}_test:${CI_COMMIT_REF_SLUG}
  variables:
    GIT_STRATEGY: none
    VOQALAPP_DB_USERNAME: superman
    VOQALAPP_DB_PASSWORD: sup_3rman
    VOQALAPP_DB_HOST: postgres
    POSTGRES_USER: superman
    POSTGRES_PASSWORD: sup_3rman
    POSTGRES_DB: voqalapp_test
    VOQALAPP_ACTIONCABLE_REDIS_URL: 'redis://redis/1'
    VOQALAPP_ACTIVEJOB_REDIS_URL: 'redis://redis/2'
  services:
    - postgres:9.6-alpine
    - redis:4.0-alpine
  script:
    - cd /webapp
    - ./bin/docker_run_test.sh

test_nlp:
  stage: test
  image: ${DOCKER_IMAGE_NLP}_test:${CI_COMMIT_REF_SLUG}
  variables:
    GIT_STRATEGY: none
  script:
    - cd /tests
    - bundle exec rake test

# Push tested docker image
push_webapp:
  stage: docker_push
  image: docker:dind
  variables:
    GIT_STRATEGY: none
  script:
    - echo "${CI_REGISTRY_PASSWORD}" | docker login --username "${CI_REGISTRY_USER}" --password-stdin $CI_REGISTRY
    - docker tag ${DOCKER_IMAGE_APP}:${CI_COMMIT_REF_SLUG} ${DOCKER_IMAGE_APP}:latest
    - docker push ${DOCKER_IMAGE_APP}:latest

push_nlp:
  stage: docker_push
  image: docker:dind
  variables:
    GIT_STRATEGY: none
  script:
    - echo "${CI_REGISTRY_PASSWORD}" | docker login --username "${CI_REGISTRY_USER}" --password-stdin $CI_REGISTRY
    - docker tag ${DOCKER_IMAGE_NLP}:${CI_COMMIT_REF_SLUG} ${DOCKER_IMAGE_NLP}:latest
    - docker push ${DOCKER_IMAGE_NLP}:latest

push_ruby_base:
  stage: docker_push
  image: docker:dind
  variables:
    GIT_STRATEGY: none
  script:
    - echo "${CI_REGISTRY_PASSWORD}" | docker login --username "${CI_REGISTRY_USER}" --password-stdin $CI_REGISTRY
    - docker tag ${DOCKER_IMAGE_TOOLS_RUBY}:${CI_COMMIT_REF_SLUG} ${DOCKER_IMAGE_TOOLS_RUBY}:latest
    - docker push ${DOCKER_IMAGE_TOOLS_RUBY}:latest

push_loadbalancer:
  stage: docker_push
  image: docker:dind
  variables:
    GIT_STRATEGY: none
  script:
    - echo "${CI_REGISTRY_PASSWORD}" | docker login --username "${CI_REGISTRY_USER}" --password-stdin $CI_REGISTRY
    - docker tag ${DOCKER_IMAGE_TOOLS_RUBY}:${CI_COMMIT_REF_SLUG} ${DOCKER_IMAGE_TOOLS_RUBY}:latest
    - docker push ${DOCKER_IMAGE_TOOLS_RUBY}:latest

# Deploy any branches on rancher dev
deploy_branch:
  stage: deploy
  image: docker-registry.pertimm.net/tools/docker-rancher-cli:latest
  dependencies:
    - build_webapp
    - build_nlp
  environment:
    name: ${CI_COMMIT_REF_NAME}
    url: https://voqal-platform-${CI_ENVIRONMENT_SLUG}.voqal.ai
    on_stop: delete_env
  variables:
    VOQALAPP_DEPLOY_RANCHER_STACK: voqal-platform-${CI_ENVIRONMENT_SLUG}
    VOQALAPP_BASEURL: https://voqal-platform-${CI_ENVIRONMENT_SLUG}.voqal.ai
  script:
    - echo "Deploy ${VOQALAPP_DEPLOY_RANCHER_STACK} on ${RANCHER_URL}/dev ( ${CI_ENVIRONMENT_URL} )"
    - cd deployment
    - rancher --debug --environment dev up --stack ${VOQALAPP_DEPLOY_RANCHER_STACK} --file docker-compose.yml --file docker-compose-rancher.yml -d --pull --force-upgrade --confirm-upgrade

# remove environment
delete_env:
  stage: admin
  image: docker-registry.pertimm.net/tools/docker-rancher-cli:latest
  environment:
    name: ${CI_COMMIT_REF_NAME}
    url: https://voqal-platform-${CI_ENVIRONMENT_SLUG}.voqal.ai
    action: stop
  variables:
    GIT_STRATEGY: none
    VOQALAPP_DEPLOY_RANCHER_STACK: voqal-platform-${CI_ENVIRONMENT_SLUG}
    VOQALAPP_BASEURL: https://voqal-platform-${CI_ENVIRONMENT_SLUG}.voqal.ai
  script:
    - echo "Remove ${VOQALAPP_DEPLOY_RANCHER_STACK} on ${RANCHER_URL}/dev ( ${CI_ENVIRONMENT_URL} )"
    - rancher --debug --environment dev rm --stop --type stack ${VOQALAPP_DEPLOY_RANCHER_STACK}
  when: manual
  allow_failure: true

# invite admin user
invite_admin:
  stage: admin
  image: docker-registry.pertimm.net/tools/docker-rancher-cli:latest
  environment:
    name: ${CI_COMMIT_REF_NAME}
    url: https://voqal-platform-${CI_ENVIRONMENT_SLUG}.voqal.ai
  variables:
    GIT_STRATEGY: none
    VOQALAPP_DEPLOY_RANCHER_STACK: voqal-platform-${CI_ENVIRONMENT_SLUG}
    VOQALAPP_BASEURL: https://voqal-platform-${CI_ENVIRONMENT_SLUG}.voqal.ai
  script:
    - echo "Add user ${GITLAB_USER_EMAIL} as admin on ${VOQALAPP_DEPLOY_RANCHER_STACK} on ${RANCHER_URL}/dev ( ${CI_ENVIRONMENT_URL} )"
    - TASK_CMD="./bin/rails users:invite_admin[${GITLAB_USER_EMAIL}]"
    - rancher --environment dev exec ${VOQALAPP_DEPLOY_RANCHER_STACK}-app-1 ${TASK_CMD}
  when: manual
  allow_failure: true
