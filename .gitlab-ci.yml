stages:
  # - prerequist
  # - build_1
  # - build_2
  # - test
  # - docker_tag
  - deploy
  # - admin

image: docker:stable

.kubernetes_runner: &kubernetes_runner
  tags:
    - kubernetes

variables:
  SKIP_TEST: "true"
  CI_SERVICE_HOST: "127.0.0.1"
  GIT_SUBMODULE_STRATEGY: recursive
  DOCKER_HOST: "tcp://dood:2375"
  DOCKER_DRIVER: overlay2
  DOCKER_IMAGE_APP: $CI_REGISTRY_IMAGE/app
  DOCKER_IMAGE_DOC: $CI_REGISTRY_IMAGE/doc
  DOCKER_IMAGE_NLP: $CI_REGISTRY_IMAGE/nlp
  DOCKER_IMAGE_TOOLS_RUBY: $CI_REGISTRY_IMAGE/tools_ruby_base
  DOCKER_IMAGE_TOOLS_BACKUP: $CI_REGISTRY_IMAGE/tools_backup

# Build docker image

# build_ruby_base:
#   <<: *kubernetes_runner
#   stage: prerequist
#   script:
#     - docker_build ${DOCKER_IMAGE_TOOLS_RUBY}      deployment/docker_tools/ruby_base "--target image_ruby_base"
#     - docker_build ${DOCKER_IMAGE_TOOLS_RUBY}_test deployment/docker_tools/ruby_base "--target image_ruby_base_test"

# build_backup:
#   <<: *kubernetes_runner
#   stage: prerequist
#   script:
#     - docker_build ${DOCKER_IMAGE_TOOLS_BACKUP} deployment/docker_tools/backup

# build_doc:
#   <<: *kubernetes_runner
#   stage: build_1
#   script:
#     - docker_build ${DOCKER_IMAGE_DOC}      doc    "--build-arg VIKY_IMAGE_TAG=${CI_COMMIT_REF_SLUG} --target image_doc_run"

# build_webapp:
#   <<: *kubernetes_runner
#   stage: build_2
#   script:
#     - docker_build ${DOCKER_IMAGE_APP}      webapp "--build-arg VIKY_IMAGE_TAG=${CI_COMMIT_REF_SLUG} --target image_ruby_run"

# build_webapp_test:
#   <<: *kubernetes_runner
#   stage: build_2
#   script:
#     - docker_build ${DOCKER_IMAGE_APP}_test webapp "--build-arg VIKY_IMAGE_TAG=${CI_COMMIT_REF_SLUG} --target image_ruby_test"

# build_nlp:
#   <<: *kubernetes_runner
#   stage: build_2
#   script:
#     - docker_build ${DOCKER_IMAGE_NLP}      nlp "--target run_image"
#     - docker_build ${DOCKER_IMAGE_NLP}_test nlp "--target test_image"

# # Test
# .test_webapp: &test_webapp
#   stage: test
#   image: ${DOCKER_IMAGE_APP}_test:${CI_COMMIT_REF_SLUG}_${CI_PIPELINE_ID}
#   variables:
#     POSTGRES_USER: superman
#     POSTGRES_PASSWORD: sup_3rman
#     POSTGRES_DB: vikyapp_test
#   services:
#     - postgres:9.6-alpine
#     - redis:3.2-alpine
#     - name: docker.elastic.co/elasticsearch/elasticsearch:6.6.1
#       command: ["bin/elasticsearch", "-Ediscovery.type=single-node"] # Important other wise, port 9200 will never be exposed
#   before_script:
#     - export VIKYAPP_DB_USERNAME="${POSTGRES_USER}"
#     - export VIKYAPP_DB_PASSWORD="${POSTGRES_PASSWORD}"
#     - export VIKYAPP_DB_HOST="${CI_SERVICE_HOST:-postgres}"
#     - export VIKYAPP_ACTIONCABLE_REDIS_URL="redis://${CI_SERVICE_HOST:-redis}:6379/1"
#     - export VIKYAPP_ACTIVEJOB_REDIS_URL="redis://${CI_SERVICE_HOST:-redis}:6379/2"
#     - export VIKYAPP_STATISTICS_URL="http://${CI_SERVICE_HOST:-elasticsearch}:9200"
#     - cd /webapp
#   artifacts:
#     expire_in: 1 week
#     reports:
#       junit: "reports/TEST-*.xml"

# test_webapp_unit:
#   <<: *kubernetes_runner
#   <<: *test_webapp
#   script:
#     - cd /webapp
#     - if [ "${SKIP_TEST:-false}" != "true" ]; then ./bin/docker_run_test.sh unit ; fi

# # Test
# test_webapp_system:
#   <<: *kubernetes_runner
#   <<: *test_webapp
#   script:
#     - if [ "${SKIP_TEST:-false}" != "true" ]; then ./bin/docker_run_test.sh system ; fi

# test_nlp:
#   <<: *kubernetes_runner
#   stage: test
#   image: ${DOCKER_IMAGE_NLP}_test:${CI_COMMIT_REF_SLUG}_${CI_PIPELINE_ID}
#   services:
#     - redis:3.2-alpine
#   variables:
#     GIT_STRATEGY: none
#   script:
#     - export VIKYAPP_REDIS_PACKAGE_NOTIFIER="redis://${CI_SERVICE_HOST:-redis}:6379/3"
#     - if [ "${SKIP_TEST:-false}" != "true" ]; then /docker_run_test.sh ; fi
#   artifacts:
#     expire_in: 1 week
#     reports:
#       junit:
#         - "reports/TEST-*.xml"

# # Tag docker image to lasted
# tag_doc:
#   <<: *kubernetes_runner
#   stage: docker_tag
#   only:
#     - develop
#   variables:
#     GIT_STRATEGY: none
#   script:
#     - docker_tag_latest ${DOCKER_IMAGE_DOC}

# tag_webapp:
#   <<: *kubernetes_runner
#   stage: docker_tag
#   only:
#     - develop
#   variables:
#     GIT_STRATEGY: none
#   script:
#     - docker_tag_latest ${DOCKER_IMAGE_APP}
#     - docker_tag_latest ${DOCKER_IMAGE_APP}_test

# tag_nlp:
#   <<: *kubernetes_runner
#   stage: docker_tag
#   only:
#     - develop
#   variables:
#     GIT_STRATEGY: none
#   script:
#     - docker_tag_latest ${DOCKER_IMAGE_NLP}

# tag_ruby_base:
#   <<: *kubernetes_runner
#   stage: docker_tag
#   only:
#     - develop
#   variables:
#     GIT_STRATEGY: none
#   script:
#     - docker_tag_latest ${DOCKER_IMAGE_TOOLS_RUBY}
#     - docker_tag_latest ${DOCKER_IMAGE_TOOLS_RUBY}_test

# tag_backup:
#   <<: *kubernetes_runner
#   stage: docker_tag
#   only:
#     - develop
#   variables:
#     GIT_STRATEGY: none
#   script:
#     - docker_tag_latest ${DOCKER_IMAGE_TOOLS_BACKUP}

# Deploy any branches on rancher dev
deploy_dev:
  <<: *kubernetes_runner
  stage: deploy
  except:
    - master
    - tags
  image: dtzar/helm-kubectl:2.13.1
  # dependencies:
  #   - build_webapp
  #   - build_nlp
  environment:
    name: ${CI_COMMIT_REF_NAME}
    url: https://viky-${CI_ENVIRONMENT_SLUG}-platform-dev.viky.ai
    # on_stop: delete_env
  variables:
    VIKYAPP_DEPLOY_RANCHER_STACK: viky-${CI_ENVIRONMENT_SLUG}-platform-dev
    VIKYAPP_BASEURL: https://viky-${CI_ENVIRONMENT_SLUG}-platform-dev.viky.ai
    VIKY_IMAGE_TAG: ${CI_COMMIT_REF_SLUG}_${CI_PIPELINE_ID}
    S3_ACCESS_KEY: $S3_ACCESS_KEY
    S3_SECRET_KEY: $S3_SECRET_KEY
  services:
    - name: docker.elastic.co/elasticsearch/elasticsearch:6.6.1
      alias: elastic
      command: ["bin/elasticsearch", "-Ediscovery.type=single-node"] # Important other wise, port 9200 will never be exposed
  script:
    # - bin/elasticsearch-keystore --help
    - curl "http://elasticsearch:9200"
    - curl "http://elastic:9200"
    - export KUBECONFIG=$KUBECONFIG
    - echo "Init helm ..."
    - helm init --client-only --wait
    - echo "Create namespace"
    - kubectl create namespace "viky-${CI_ENVIRONMENT_SLUG}" || true
    - echo "Create registry secret"
    - kubectl delete secret pertimm-registry --namespace "viky-${CI_ENVIRONMENT_SLUG}" || true
    - kubectl create secret docker-registry pertimm-registry --namespace "viky-${CI_ENVIRONMENT_SLUG}" --docker-server="${CI_REGISTRY}" --docker-username="${CI_REGISTRY_USER}" --docker-password="${CI_REGISTRY_PASSWORD}"
    - echo "Deploy Viky Infrastructure"
    - helm upgrade --wait --install ${CI_ENVIRONMENT_SLUG}-infra --namespace "viky-${CI_ENVIRONMENT_SLUG}" deployment/kubernetes/viky-infra/
    - echo "Deploy Viky Platform"
    - helm upgrade --wait --install ${CI_ENVIRONMENT_SLUG}-platform --namespace "viky-${CI_ENVIRONMENT_SLUG}" deployment/kubernetes/viky-platform/

# # Deploy master on rancher preprod
# deploy_preprod:
#   <<: *kubernetes_runner
#   stage: deploy
#   only:
#     - master
#   except:
#     - tags
#   image: docker-registry.pertimm.net/tools/docker-rancher-cli:latest
#   dependencies:
#     - build_webapp
#     - build_nlp
#   environment:
#     name: viky-preprod
#     url: https://viky-beta.viky.ai
#   variables:
#     VIKYAPP_AUTO_BACKUP: "true"
#     VIKYAPP_DEPLOY_RANCHER_STACK: viky-beta
#     VIKYAPP_BASEURL: https://viky-beta.viky.ai
#     VIKY_IMAGE_TAG: ${CI_COMMIT_REF_SLUG}_${CI_PIPELINE_ID}
#   script:
#     - echo "Deploy ${VIKYAPP_DEPLOY_RANCHER_STACK} on ${RANCHER_URL}/preprod ( ${CI_ENVIRONMENT_URL} )"
#     - cd deployment
#     - viky_backup
#     - echo "Deploy ..."
#     - rancher --wait --environment preprod up --stack ${VIKYAPP_DEPLOY_RANCHER_STACK} --file docker-compose.yml --file docker-compose-infra.yml --file docker-compose-rancher.yml -d --batch-size 1 --pull --force-upgrade --confirm-upgrade --prune

# # remove environment
# delete_env:
#   <<: *kubernetes_runner
#   stage: admin
#   except:
#     - master
#     - tags
#   image: docker-registry.pertimm.net/tools/docker-rancher-cli:latest
#   environment:
#     name: ${CI_COMMIT_REF_NAME}
#     url: https://viky-${CI_ENVIRONMENT_SLUG}-platform-dev.viky.ai
#     action: stop
#   variables:
#     VIKYAPP_DEPLOY_RANCHER_STACK: viky-${CI_ENVIRONMENT_SLUG}-platform-dev
#     VIKYAPP_BASEURL: https://viky-${CI_ENVIRONMENT_SLUG}-platform-dev.viky.ai
#     VIKY_IMAGE_TAG: ${CI_COMMIT_REF_SLUG}_${CI_PIPELINE_ID}
#   script:
#     - echo "Remove ${VIKYAPP_DEPLOY_RANCHER_STACK} on ${RANCHER_URL}/dev ( ${CI_ENVIRONMENT_URL} )"
#     - rancher --debug --environment dev rm --stop --type stack ${VIKYAPP_DEPLOY_RANCHER_STACK}
#   when: manual
#   allow_failure: true

# # invite admin user
# invite_admin_dev:
#   <<: *kubernetes_runner
#   stage: admin
#   image: docker-registry.pertimm.net/tools/docker-rancher-cli:latest
#   except:
#     - master
#     - tags
#   environment:
#     name: ${CI_COMMIT_REF_NAME}
#     url: https://viky-${CI_ENVIRONMENT_SLUG}-platform-dev.viky.ai
#   variables:
#     GIT_STRATEGY: none
#     VIKYAPP_DEPLOY_RANCHER_STACK: viky-${CI_ENVIRONMENT_SLUG}-platform-dev
#     VIKYAPP_BASEURL: https://viky-${CI_ENVIRONMENT_SLUG}-platform-dev.viky.ai
#   script:
#     - echo "Add user ${GITLAB_USER_EMAIL} as admin on ${VIKYAPP_DEPLOY_RANCHER_STACK} on ${RANCHER_URL}/dev ( ${CI_ENVIRONMENT_URL} )"
#     - TASK_CMD="./bin/rails users:invite_admin[${GITLAB_USER_EMAIL}]"
#     - rancher_exec dev ${VIKYAPP_DEPLOY_RANCHER_STACK}-app-master-1 ${TASK_CMD}
#   when: manual
#   allow_failure: true

# # invite admin user
# invite_admin_preprod:
#   <<: *kubernetes_runner
#   stage: admin
#   image: docker-registry.pertimm.net/tools/docker-rancher-cli:latest
#   only:
#     - master
#   environment:
#     name: viky-preprod
#     url: https://viky-beta.viky.ai
#   variables:
#     GIT_STRATEGY: none
#     VIKYAPP_DEPLOY_RANCHER_STACK: viky-beta
#     VIKYAPP_BASEURL: https://viky-beta.viky.ai
#   script:
#     - echo "Add user ${GITLAB_USER_EMAIL} as admin on ${VIKYAPP_DEPLOY_RANCHER_STACK} on ${RANCHER_URL}/dev ( ${CI_ENVIRONMENT_URL} )"
#     - TASK_CMD="./bin/rails users:invite_admin[${GITLAB_USER_EMAIL}]"
#     - rancher_exec preprod ${VIKYAPP_DEPLOY_RANCHER_STACK}-app-master-1 ${TASK_CMD}
#   when: manual
#   allow_failure: true

# # backup
# backup_dev:
#   <<: *kubernetes_runner
#   stage: admin
#   image: docker-registry.pertimm.net/tools/docker-rancher-cli:latest
#   except:
#     - master
#     - tags
#   environment:
#     name: ${CI_COMMIT_REF_NAME}
#     url: https://viky-${CI_ENVIRONMENT_SLUG}-platform-dev.viky.ai
#   variables:
#     GIT_STRATEGY: none
#     VIKYAPP_DEPLOY_RANCHER_STACK: viky-${CI_ENVIRONMENT_SLUG}-platform-dev
#     VIKYAPP_BASEURL: https://viky-${CI_ENVIRONMENT_SLUG}-platform-dev.viky.ai
#   script:
#     - echo "Backup platform data from ${VIKYAPP_DEPLOY_RANCHER_STACK} on ${RANCHER_URL}/dev ( ${CI_ENVIRONMENT_URL} )"
#     - rancher_exec dev ${VIKYAPP_DEPLOY_RANCHER_STACK}-backup-1 bash /backup/backup.sh
#   when: manual
#   allow_failure: true

# # backup
# backup_preprod:
#   <<: *kubernetes_runner
#   stage: admin
#   image: docker-registry.pertimm.net/tools/docker-rancher-cli:latest
#   only:
#     - master
#   environment:
#     name: viky-preprod
#     url: https://viky-beta.viky.ai
#   variables:
#     GIT_STRATEGY: none
#     VIKYAPP_DEPLOY_RANCHER_STACK: viky-beta
#     VIKYAPP_BASEURL: https://viky-beta.viky.ai
#   script:
#     - echo "Backup platform data from ${VIKYAPP_DEPLOY_RANCHER_STACK} on ${RANCHER_URL}/dev ( ${CI_ENVIRONMENT_URL} )"
#     - rancher_exec preprod ${VIKYAPP_DEPLOY_RANCHER_STACK}-backup-1 bash /backup/backup.sh
#   when: manual
#   allow_failure: true

# # backup restore
# backup_restore_dev:
#   <<: *kubernetes_runner
#   stage: admin
#   image: docker-registry.pertimm.net/tools/docker-rancher-cli:latest
#   except:
#     - master
#     - tags
#   environment:
#     name: ${CI_COMMIT_REF_NAME}
#     url: https://viky-${CI_ENVIRONMENT_SLUG}-platform-dev.viky.ai
#   variables:
#     GIT_STRATEGY: none
#     VIKYAPP_DEPLOY_RANCHER_STACK: viky-${CI_ENVIRONMENT_SLUG}-platform-dev
#     VIKYAPP_BASEURL: https://viky-${CI_ENVIRONMENT_SLUG}-platform-dev.viky.ai
#   script:
#     - echo "Restore data from preprod (https://viky-beta.viky.ai) to ${VIKYAPP_DEPLOY_RANCHER_STACK} on ${RANCHER_URL}/dev ( ${CI_ENVIRONMENT_URL} )"
#     - echo "Ensure platform ${VIKYAPP_DEPLOY_RANCHER_STACK} is starting ..."
#     - rancher --wait --environment dev start ${VIKYAPP_DEPLOY_RANCHER_STACK}                 --type stack
#     - echo "Backup current data ..."
#     - rancher_exec dev ${VIKYAPP_DEPLOY_RANCHER_STACK}-backup-1 /backup/backup.sh
#     - sleep 5
#     - echo "Stopping platform ${VIKYAPP_DEPLOY_RANCHER_STACK} ..."
#     - rancher --wait --environment dev stop ${VIKYAPP_DEPLOY_RANCHER_STACK}                 --type stack
#     - sleep 5
#     - echo "Restart databases and backup tools ..."
#     - rancher --wait --environment dev start ${VIKYAPP_DEPLOY_RANCHER_STACK}/db-postgresql  --type service
#     - rancher --wait --environment dev start ${VIKYAPP_DEPLOY_RANCHER_STACK}/db-redis       --type service
#     - sleep 5
#     - echo "Restart backup tools ..."
#     - rancher --wait --environment dev start ${VIKYAPP_DEPLOY_RANCHER_STACK}/backup                --type service
#     - sleep 5
#     - echo "Restoring data ..."
#     - rancher_exec dev ${VIKYAPP_DEPLOY_RANCHER_STACK}-backup-1 /backup/restore.sh
#     - sleep 2
#     - echo "Restart sevices in right order ..."
#     - rancher --wait --environment dev start ${VIKYAPP_DEPLOY_RANCHER_STACK}/stats-service --type service
#     - rancher --wait --environment dev start ${VIKYAPP_DEPLOY_RANCHER_STACK}/es-master     --type service
#     - rancher --wait --environment dev start ${VIKYAPP_DEPLOY_RANCHER_STACK}/es-cerebro    --type service
#     - rancher --wait --environment dev start ${VIKYAPP_DEPLOY_RANCHER_STACK}/es-data       --type service
#     - rancher --wait --environment dev start ${VIKYAPP_DEPLOY_RANCHER_STACK}/es-kibana     --type service
#     - rancher --wait --environment dev start ${VIKYAPP_DEPLOY_RANCHER_STACK}/app-master    --type service
#     - sleep 2
#     - echo "Restarting rest of platform ..."
#     - rancher --wait --environment dev start ${VIKYAPP_DEPLOY_RANCHER_STACK}                --type stack
#   when: manual
#   allow_failure: true

# # Cache
# cache_clear_dev:
#   <<: *kubernetes_runner
#   stage: admin
#   image: docker-registry.pertimm.net/tools/docker-rancher-cli:latest
#   except:
#     - master
#     - tags
#   environment:
#     name: ${CI_COMMIT_REF_NAME}
#     url: https://viky-${CI_ENVIRONMENT_SLUG}-platform-dev.viky.ai
#   variables:
#     GIT_STRATEGY: none
#     VIKYAPP_DEPLOY_RANCHER_STACK: viky-${CI_ENVIRONMENT_SLUG}-platform-dev
#     VIKYAPP_BASEURL: https://viky-${CI_ENVIRONMENT_SLUG}-platform-dev.viky.ai
#   script:
#     - echo "Clear cache to ${VIKYAPP_DEPLOY_RANCHER_STACK} on ${RANCHER_URL}/dev ( ${CI_ENVIRONMENT_URL} )"
#     - echo "Ensure platform ${VIKYAPP_DEPLOY_RANCHER_STACK}/db-redis is started ..."
#     - rancher --wait --environment dev start ${VIKYAPP_DEPLOY_RANCHER_STACK}/db-redis       --type service || echo "Redis is already running."
#     - sleep 5
#     - echo "Clear all cache ..."
#     - rancher_exec dev ${VIKYAPP_DEPLOY_RANCHER_STACK}/db-redis redis-cli flushall
#   when: manual
#   allow_failure: true

# cache_clear_preprod:
#   <<: *kubernetes_runner
#   stage: admin
#   image: docker-registry.pertimm.net/tools/docker-rancher-cli:latest
#   only:
#     - master
#   environment:
#     name: viky-preprod
#     url: https://viky-beta.viky.ai
#   variables:
#     GIT_STRATEGY: none
#     VIKYAPP_DEPLOY_RANCHER_STACK: viky-beta
#     VIKYAPP_BASEURL: https://viky-beta.viky.ai
#   script:
#     - echo "Clear cache to ${VIKYAPP_DEPLOY_RANCHER_STACK} on ${RANCHER_URL}/prod ( ${CI_ENVIRONMENT_URL} )"
#     - echo "Ensure platform ${VIKYAPP_DEPLOY_RANCHER_STACK}/db-redis is started ..."
#     - rancher --wait --environment preprod start ${VIKYAPP_DEPLOY_RANCHER_STACK}/db-redis       --type service || echo "Redis is already running."
#     - sleep 5
#     - echo "Clear all cache ..."
#     - rancher_exec preprod ${VIKYAPP_DEPLOY_RANCHER_STACK}/db-redis redis-cli flushall
#   when: manual
#   allow_failure: true

before_script:
  - |
    # Auto DevOps variables and functions
    [[ "${TRACE:-0}" == "1" ]] && set -x

    function viky_backup ()
    {
      echo "Backing up data ..."
      rancher_exec preprod ${VIKYAPP_DEPLOY_RANCHER_STACK}-backup-1 bash /backup/backup.sh

      if [ $? -ne 0 ]; then
        (>&2 echo "Backing up data FAILED")
      fi
      echo ""
      return 0
    }

    function docker_build ()
    {
      # login to private registry
      docker_login

      local CI_DOCKER_IMAGE="$1"
      local CI_DOCKER_DIR="$2"
      local CI_DOCKER_IMAGE_BUILD_OPT="$3"

      echo "Build docker image ${CI_DOCKER_IMAGE}:${CI_COMMIT_REF_SLUG}_${CI_PIPELINE_ID} from dir ${CI_DOCKER_DIR} ..."
      docker build --pull ${CI_DOCKER_IMAGE_BUILD_OPT} -t ${CI_DOCKER_IMAGE}:${CI_COMMIT_REF_SLUG}_${CI_PIPELINE_ID} ${CI_DOCKER_DIR}
      echo ""

      echo "Taggging ${CI_DOCKER_IMAGE}:${CI_COMMIT_REF_SLUG}_${CI_PIPELINE_ID} to ${CI_DOCKER_IMAGE}:latest"
      docker tag ${CI_DOCKER_IMAGE}:${CI_COMMIT_REF_SLUG}_${CI_PIPELINE_ID} ${CI_DOCKER_IMAGE}:latest

      echo "Taggging ${CI_DOCKER_IMAGE}:${CI_COMMIT_REF_SLUG}_${CI_PIPELINE_ID} to ${CI_DOCKER_IMAGE}:${CI_COMMIT_REF_SLUG}"
      docker tag ${CI_DOCKER_IMAGE}:${CI_COMMIT_REF_SLUG}_${CI_PIPELINE_ID} ${CI_DOCKER_IMAGE}:${CI_COMMIT_REF_SLUG}

      echo ""
      echo "Pushing ${CI_DOCKER_IMAGE}:${CI_COMMIT_REF_SLUG}_${CI_PIPELINE_ID} to GitLab Container Registry ..."
      docker push ${CI_DOCKER_IMAGE}:${CI_COMMIT_REF_SLUG}_${CI_PIPELINE_ID}

      echo ""
      echo "Pushing ${CI_DOCKER_IMAGE}:${CI_COMMIT_REF_SLUG} to GitLab Container Registry ..."
      docker push ${CI_DOCKER_IMAGE}:${CI_COMMIT_REF_SLUG}

      echo ""
    }

    function docker_tag_latest ()
    {
      # login to private registry
      docker_login

      local CI_DOCKER_IMAGE="$1"

      echo "Pulling ${CI_DOCKER_IMAGE}:${CI_COMMIT_REF_SLUG}_${CI_PIPELINE_ID}"
      docker pull ${CI_DOCKER_IMAGE}:${CI_COMMIT_REF_SLUG}_${CI_PIPELINE_ID}

      echo "Taggging ${CI_DOCKER_IMAGE}:${CI_COMMIT_REF_SLUG}_${CI_PIPELINE_ID} to ${CI_DOCKER_IMAGE}:latest"
      docker tag ${CI_DOCKER_IMAGE}:${CI_COMMIT_REF_SLUG}_${CI_PIPELINE_ID} ${CI_DOCKER_IMAGE}:latest

      echo "Pushing ${CI_DOCKER_IMAGE}:latest to GitLab Container Registry ..."
      docker push ${CI_DOCKER_IMAGE}:latest
      echo ""
    }

    function docker_login ()
    {
      if [[ -n "$CI_REGISTRY_USER" ]]; then
        echo "Logging to GitLab Container Registry with CI credentials ..."
        echo "${CI_REGISTRY_PASSWORD}" | docker login --username "${CI_REGISTRY_USER}" --password-stdin "${CI_REGISTRY}"
        echo ""
      fi
    }

    function rancher_exec ()
    {
      local RANCHER_ENV=$1

      # simulate a tty with script command https://github.com/rancher/rancher/issues/7971#issuecomment-286856228
      local CURRENT_COMMAND="rancher --wait --environment ${RANCHER_ENV} exec -t ${@:2}"
      echo "Exec : ${CURRENT_COMMAND}"
      script --return --flush --quiet --command "${CURRENT_COMMAND}" /dev/null
      return $?
    }
